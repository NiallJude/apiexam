package com.nialljude.dev.files;

import com.google.gson.Gson;
import com.nialljude.dev.handlers.GithubApiHandler;
import com.nialljude.dev.github.Project;
import com.nialljude.dev.handlers.TwitterApiHandler;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

/**
 * JSONManager holds a lot of functions related to
 * the reading and writing of files specifically in JSON.
 *
 * @author Niall Jude Collins.
 */
public class JSONManager {

    // Rate Limit will not change (therefore is final)
    private final int rateLimit = 10;
    private final String filepath = "Github.json";

    /**
     * Return a list of all projectsToSearch (usually 10 items long).
     *
     * @author Niall Jude Collins
     * @return projectsToSearch list.
     */
    public List<Project> readJSONFile() {

        // Get JSON String from the file
        String json = getJSONString();
        // Now read the json String using the GithubApiHandler and GSON
        GithubApiHandler githubApiHandler = getGithubApiHandler(json);

        // Get a list of all projects from Github API response
        List<Project> projects = githubApiHandler.getItems();
        // Get a subList of first 10 projects (cope with Twitter rate limits)
        List<Project> projectsToSearch = getRateLimitedList(projects);

        // Print github names
        printProjectNames(projectsToSearch);

        // Return list of 10 projects
        return projectsToSearch;
    }

    /**
     * Print Project Names - For the benefit of confirmation to the user.
     *
     * @author Niall Jude Collins
     * @param projectsToSearch - The list of projects.
     */
    private void printProjectNames(List<Project> projectsToSearch) {
        System.out.println("\nProjects selected by name: \n");
        for (Project project : projectsToSearch)
            System.out.println(project.getName());
    }

    /**
     * Get the list cut down to the rate-limited size.
     *
     * @author Niall Jude Collins
     * @param projects
     * @return The cut list.
     */
    private List<Project> getRateLimitedList(List<Project> projects) {

        List<Project> projectsToSearch = new ArrayList<>();

        if (projects.size() > rateLimit) {
            projectsToSearch = projects.subList(0, rateLimit);
        }

        if (projectsToSearch.size() <= rateLimit)
            System.out.println("Rate Limit: " + rateLimit);
            System.out.println("Projects Selected: " + projectsToSearch.size());
        return projectsToSearch;
    }

    /**
     * Return a new GithubAPI Handler objects
     * generated by GSON from the Github API JSON response.
     *
     * @author Niall Jude Collins
     * @param json
     * @return GithubAPIHandler object.
     */
    private GithubApiHandler getGithubApiHandler(String json) {
        return new Gson().fromJson(json, GithubApiHandler.class);
    }

    /**
     * Read the Github.json file.
     * Return the results as a String.
     *
     * @author Niall Jude Collins
     * @return StringBuilder to String.
     */
    private String getJSONString() {
        StringBuilder sb = new StringBuilder();
        try {
            InputStream is = new FileInputStream(filepath);
            BufferedReader buf = new BufferedReader(new InputStreamReader(is));
            String line = buf.readLine();
            while (line != null) {
                sb.append(line).append("\n");
                line = buf.readLine();
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return sb.toString();
    }

    /**
     * Convert the TwitterAPIHandler objects to JSON form String.
     * This is to satisfy the display requirements.
     *
     * @author Niall Jude Collins
     * @param twitterApiHandler
     * @return The JSON inside a String. Ready to Print.
     */
    public String convertToJSON(TwitterApiHandler twitterApiHandler){
        Gson gson = new Gson();
        // 2. Java object to JSON, and assign to a String
        String jsonInString = gson.toJson(twitterApiHandler);
        return jsonInString;
    }

    /**
     * Convert the Project objects to JSON form String.
     * This is to satisfy the display requirements.
     *
     * @author Niall Jude Collins
     * @param project
     * @return The JSON inside a String. Ready to Print.
     */
    public String convertToJSON(Project project) {
        Gson gson = new Gson();
        String jsonInString = gson.toJson(project);
        return jsonInString;
    }
}